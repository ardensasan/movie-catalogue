{"version":3,"sources":["common/enums/shirt.ts","redux/actions/shirt.ts","common/enums/editor.ts","components/Shirt/ShirtDisplay/ShirtPart/index.tsx","components/Shirt/ShirtDisplay/index.tsx","components/Shirt/index.tsx","common/constants/editor.ts","utils/shirt.ts","components/Editor/ColorPicker/index.tsx","redux/actions/editor.ts","components/Editor/ModePicker/index.tsx","components/Editor/PartPicker/index.tsx","components/Editor/TexturePicker/index.tsx","common/constants/default.ts","utils/image.ts","utils/konva.ts","components/Editor/KonvaCanvas/ImageUploader/index.tsx","components/Editor/KonvaCanvas/ShapePicker/index.tsx","components/Editor/KonvaCanvas/index.tsx","components/Editor/Slider/index.tsx","components/Editor/index.tsx","common/constants/texture.ts","assets/maps/map/carpet.jpg","assets/maps/normal/carpet.jpg","assets/maps/map/checkered_towel.jpg","assets/maps/normal/checkered_towel.jpg","assets/maps/map/leather.jpg","assets/maps/normal/leather.jpg","assets/maps/map/tight_knit.jpg","assets/maps/normal/tight_knit.jpg","assets/maps/map/towel.jpg","assets/maps/normal/towel.jpg","common/constants/shapes.ts","redux/reducers/editor.ts","redux/reducers/shirt.ts","assets/model.glb","redux/reducers/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ShirtActions","EditorAction","EditorMode","ShirtPart","material","geometry","ShirtDisplay","partList","useSelector","state","shirt","length","camera","position","OrbitControls","target","Environment","preset","map","uuid","Shirt","model","gltf","useGLTF","dispatch","useDispatch","useEffect","children","scene","type","SetPartList","Part","textureLoader","changeShirtTextureMap","image","TextureLoader","load","texture","forEach","wrapS","RepeatWrapping","wrapT","flipY","repeat","set","newTexture","clone","needsUpdate","dispose","changePartTextureMap","selectedPartID","find","resetShirtTexture","normalMap","bumpMap","color","r","g","b","resetPartTexture","ColorPicker","mode","editor","colorRef","useRef","ref","defaultValue","onClick","current","value","Color","changeShirtColor","changePartColor","setSelectedPart","SetSelectedPart","setSelectedTexture","selectedTexture","SetSelectedTexture","ModePicker","modeList","Object","values","selectedMode","handleChangeMode","event","SetEditorMode","name","defaultChecked","htmlFor","PartPicker","onChange","className","TexturePicker","textureList","findIndex","parseInt","index","Defaults","loadImage","imageURL","img","window","Image","src","clearTransformer","transformer","nodes","addItemToLayer","item","layer","on","node","add","ImageUpload","handleAddImage","imageUploadRef","reader","input","files","FileReader","onloadend","result","readAsDataURL","hidden","accept","ShapePicker","shapeList","selectedShape","SetSelectedShape","setSelectedShape","shape","config","KonvaCanvas","WIDTH","innerWidth","HEIGHT","stageRef","imageRef","layerRef","transformerRef","width","height","fill","Konva","draggable","stage","toDataURL","pixelRatio","changeShirtTextureNormalMap","changePartTextureNormalMap","getChildren","getClassName","child","destroy","Slider","min","max","step","center","x","changeShirtXPosition","parseFloat","changePartXPosition","y","changeShirtYPosition","changePartYPosition","changeShirtTextureScaling","changePartTextureScaling","Editor","Rect","stroke","strokeWidth","Star","numPoints","innerRadius","outerRadius","Circle","radius","Ring","INITIAL_STATE","undefined","xPosition","yPosition","combineReducers","action","SetXPosition","SetYPosition","ChangeShirtModel","shirtModel","App","store","createStore","allReducer","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAYA,E,mEAAAA,K,sCAAAA,E,oCAAAA,E,6BAAAA,M,KCGL,ICHKC,EASAC,E,gCCCGC,EAPa,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAASC,EAAc,EAAdA,SACnC,OAAO,sBACPA,SAAUA,EACVD,SAAUA,KCoBCE,EAnBc,WAC3B,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,MAAMH,YAC3D,OAAKA,EAASI,OAIZ,cAAC,WAAD,UACE,eAAC,IAAD,CAAQC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,KAAnC,UACE,cAACC,EAAA,EAAD,CAAeC,OAAQ,CAAC,GAAG,GAAG,KAC9B,cAACC,EAAA,EAAD,CAAaC,OAAO,WACnBV,EAASW,KAAI,YAAyC,IAAtCb,EAAqC,EAArCA,SAAUD,EAA2B,EAA3BA,SAAUe,EAAiB,EAAjBA,KACnC,OACE,cAAC,EAAD,CAAWd,SAAUA,EAAUD,SAAUA,GAAee,WATzD,MCUIC,EAbO,WACpB,IAAMC,EAAQb,aAAY,SAACC,GAAD,OAAkBA,EAAMC,MAAMW,SAClDC,EAAYC,YAAQF,GAAO,GAC3BG,EAAWC,cAOjB,OALAC,qBAAU,WACR,IJVwBnB,EIUhBoB,EAAaL,EAAKM,MAAlBD,SACRH,GJXwBjB,EIWHoB,EJVhB,CACLE,KAAM7B,EAAa8B,YACnBvB,gBISC,CAACiB,EAAUF,EAAKM,QAEZ,cAAC,EAAD,KCjBI1B,G,MAAa,CACtBkB,MAAM,QACNW,KAAM,S,OCANC,EAAsC,KAkB7BC,EAAwB,SAAC1B,EAAsB2B,GACrDF,IACHA,EAAgB,IAAIG,iBAEtBH,EAAcI,KAAKF,GAAO,SAACG,GACzB9B,EAAS+B,SAAQ,YAAmB,IAAhBlC,EAAe,EAAfA,SAClBiC,EAAQE,MAAQC,iBAChBH,EAAQI,MAAQD,iBAChBH,EAAQK,OAAQ,EAChBL,EAAQM,OAAOC,IAAI,IAAK,KAExB,IAAMC,EAAaR,EAAQS,QAC3B1C,EAASc,IAAM2B,EACfzC,EAASc,IAAI6B,aAAc,EAC3B3C,EAAS2C,aAAc,EACvBF,EAAWG,aAEbX,EAAQW,cA6BCC,EAAuB,SAClCC,EACA3C,EACA2B,GAEA,GAAIgB,EAAJ,CACKlB,IACHA,EAAgB,IAAIG,iBAEtB,IAAQ/B,EAAaG,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACR4B,EAAcI,KAAKF,GAAO,SAACG,GACzBA,EAAQE,MAAQC,iBAChBH,EAAQI,MAAQD,iBAChBH,EAAQK,OAAQ,EAChBL,EAAQM,OAAOC,IAAI,IAAK,KACxBxC,EAASc,IAAMmB,EACfjC,EAASc,IAAI6B,aAAc,EAC3B3C,EAAS2C,aAAc,EACvBV,EAAQW,eA0BCI,EAAoB,SAAC7C,GAChCA,EAAS+B,SAAQ,YAAmB,IAAhBlC,EAAe,EAAfA,SACdA,EAASc,MACXd,EAASc,IAAI8B,UACb5C,EAASc,IAAM,MAEbd,EAASiD,YACXjD,EAASiD,UAAUL,UACnB5C,EAASiD,UAAY,MAEnBjD,EAASkD,UACXlD,EAASkD,QAAQN,UACjB5C,EAASkD,QAAU,MAErBlD,EAASmD,MAAMC,EAAI,EACnBpD,EAASmD,MAAME,EAAI,EACnBrD,EAASmD,MAAMG,EAAI,EACnBtD,EAAS2C,aAAc,MAIdY,EAAmB,SAC9BT,EACA3C,GAEA,GAAI2C,EAAJ,CACA,IAAQ9C,EAAaG,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACJA,EAASc,MACXd,EAASc,IAAI8B,UACb5C,EAASc,IAAM,MAEbd,EAASiD,YACXjD,EAASiD,UAAUL,UACnB5C,EAASiD,UAAY,MAEnBjD,EAASkD,UACXlD,EAASkD,QAAQN,UACjB5C,EAASkD,QAAU,MAErBlD,EAASmD,MAAMC,EAAI,EACnBpD,EAASmD,MAAME,EAAI,EACnBrD,EAASmD,MAAMG,EAAI,EACnBtD,EAAS2C,aAAc,ICtHVa,EA5BK,WAClB,IAAMrD,EAAWC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,MAAMH,YACrDsD,EAAOrD,aAAY,SAACC,GAAD,OAAkBA,EAAMqD,OAAOD,QAClDX,EAAiB1C,aACrB,SAACC,GAAD,OAAkBA,EAAMqD,OAAOZ,kBAE3Ba,EAAWC,iBAAO,MAYxB,OACE,eAAC,WAAD,yBAEE,uBAAOnC,KAAK,QAAQoC,IAAKF,EAAUG,aAAa,YAChD,wBAAQC,QAfa,WACvB,GAAIJ,EAASK,QAAS,CACpB,IAAQC,EAAeN,EAASK,QAAxBC,MACJR,IAAS3D,EAAWkB,MDFE,SAACb,EAAsBgD,GACrDhD,EAAS+B,SAAQ,YAAkB,EAAflC,SACTmD,MAAQ,IAAIe,QAAMf,MCCvBgB,CAAiBhE,EAAU8D,GAClBR,IAAS3D,EAAW6B,MDdN,SAC7BmB,EACA3C,EACAgD,GAEGL,IACkB3C,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACCmD,MAAQ,IAAIe,QAAMf,ICQrBiB,CAAgBtB,EAAgB3C,EAAU8D,KAS5C,yBACA,4B,SN7BMpE,K,oCAAAA,E,gCAAAA,E,0CAAAA,E,sCAAAA,E,8BAAAA,E,+BAAAA,M,cASAC,K,cAAAA,E,aAAAA,M,KONL,IAAMuE,EAAkB,SAACvB,GAC5B,MAAO,CACHrB,KAAM5B,EAAayE,gBACnBxB,mBAWKyB,EAAqB,SAACC,GAC/B,MAAO,CACH/C,KAAM5B,EAAa4E,mBACnBD,oBCgBOE,EA/BY,WACzB,IAAMC,EAAWC,OAAOC,OAAO/E,GACzBgF,EAAe1E,aAAY,SAACC,GAAD,OAAkBA,EAAMqD,OAAOD,QAC1DrC,EAAWC,cACX0D,EAAmB,SAACC,GACxB,IDA0BvB,ECAnBQ,EAASe,EAAMrE,OAAfsD,MACP7C,GDD0BqC,ECCHQ,EDAhB,CACHxC,KAAM5B,EAAaoF,cACnBxB,WCCN,OACE,eAAC,WAAD,wBAEGkB,EAAS7D,KAAI,SAAC2C,GACb,OACE,eAAC,WAAD,WACE,uBACEhC,KAAK,QACLyD,KAAK,cACLjB,MAAOR,EACP0B,eAAgB1B,IAASqB,EACzBf,QAASgB,IAEX,uBAAOK,QAAQ,QAAf,SAAwB3B,MARXA,MAYnB,2BCSS4B,EAlCY,WACzB,IAAMlF,EAAWC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,MAAMH,YACrD2C,EAAiB1C,aACrB,SAACC,GAAD,OAAkBA,EAAMqD,OAAOZ,kBAE3B1B,EAAWC,cAYjB,OANAC,qBAAU,WACJnB,EAASI,SAAWuC,GACtB1B,EAASiD,EAAgBlE,EAAS,GAAGY,UAKvC,eAAC,WAAD,yBAEE,wBAAQuE,SAdqB,SAACN,GAChC,IAAQf,EAAUe,EAAMrE,OAAhBsD,MACR7C,EAASiD,EAAgBJ,KAYqBsB,UAAU,YAAtD,SACGpF,EAASW,KAAI,YAA2B,IAAxBoE,EAAuB,EAAvBA,KAAMnE,EAAiB,EAAjBA,KACrB,OACE,wBAAQkD,MAAOlD,EAAf,SACGmE,GADuBnE,QAMhC,2BCGSyE,EAlCe,WAC5B,IAAMC,EAAcrF,aAAY,SAACC,GAAD,OAAkBA,EAAMqD,OAAO+B,eACzDjB,EAAkBpE,aACtB,SAACC,GAAD,OAAkBA,EAAMqD,OAAOc,mBAE3BpD,EAAWC,cAMjB,OACE,eAAC,WAAD,WACE,uBADF,gBAGE,wBACE4C,MAAOwB,EAAYC,WACjB,SAACzD,GAAD,OAAsBA,EAAQiD,OAASV,EAAgBU,QAEzDI,SAbsB,SAACN,GAC3B,IAAQf,EAAUe,EAAMrE,OAAhBsD,MACR7C,EAASmD,EAAmBkB,EAAYE,SAAS1B,OAO/C,SAMGwB,EAAY3E,KAAI,SAACmB,EAAkB2D,GAClC,OACE,wBAAQ3B,MAAO2B,EAAf,SACG3D,EAAQiD,MADgBjD,EAAQiD,WAMzC,uBAjBF,IAiBS,2B,gBCjCAW,EACK,CACdX,KAAM,OACNpE,IAAK,KACLmC,UAAW,MCJF6C,EAAY,SAACC,GACxB,GAAKA,EAAL,CACA,IAAMC,EAAM,IAAIC,OAAOC,MAEvB,OADAF,EAAIG,IAAMJ,EACHC,ICAII,EAAmB,SAACC,GAC1BA,GACLA,EAAYC,MAAM,KAOPC,EAAiB,SAC5BC,EACAC,EACAJ,GAEAG,EAAKE,GAAG,SAAS,WACf,GAAIL,EAAa,CAGf,IAFcA,EAAYC,QAAQvD,MAAK,SAAC4D,GAAD,OAAeA,IAASH,KAI7D,YADAH,EAAYC,MAAM,CAACE,IAGrBJ,EAAiBC,OAGlBI,GAAOA,EAAMG,IAAIJ,ICQPK,G,MAlCgB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC1BC,EAAsBnD,iBAAO,MAiBnC,OACE,mCACE,wBAAO2B,UAAU,eAAjB,sBAEE,uBACE9D,KAAK,OACL6D,SAtBY,WAClB,IACI0B,EADWC,EAASF,EAAjB/C,QAGHiD,EAAMC,OAASD,EAAMC,MAAM,MAC7BF,EAAS,IAAIG,YACNC,UAAY,SAAUpC,GAC3B,IAAQqC,EAAWrC,EAAMrE,OAAjB0G,OACRP,EAAeO,GAEfJ,EAAMhD,MAAQ,MAEhB+C,EAAOM,cAAcL,EAAMC,MAAM,MAW7BrD,IAAKkD,EACLQ,QAAM,EACNC,OAAO,4CCcFC,EAtCgB,SAAC,GAA4B,IAA1BhB,EAAyB,EAAzBA,MAAOJ,EAAkB,EAAlBA,YACjCqB,EAAYtH,aAAY,SAACC,GAAD,OAAgBA,EAAMqD,OAAOgE,aACrDC,EAAgBvH,aAAY,SAACC,GAAD,OAAgBA,EAAMqD,OAAOiE,iBACzDvG,EAAWC,cAejB,OACE,eAAC,WAAD,yBAEE,wBACE8D,eAAgBwC,EAAczC,KAC9BI,SAlB4B,SAACN,GACjC,IAAQf,EAAUe,EAAMrE,OAAhBsD,MACR7C,ERW4B,SAACuG,GAC7B,MAAO,CACHlG,KAAM5B,EAAa+H,iBACnBD,iBQdKE,CAAiBH,EAAUzD,MAclC,SAIGyD,EAAU5G,KAAI,SAACgH,EAAYlC,GAC1B,OACE,wBAAQ3B,MAAO2B,EAAf,SACGkC,EAAM5C,MADkBU,QAMjC,wBAAQ7B,QAvBW,WFPE,IAACtC,EAAWsG,EEQnCxB,GFRwB9E,EESVkG,EAAclG,KFTOsG,EESDJ,EAAcI,OFR3C,IAAItG,EAAKsG,IESZtB,EACAJ,IAmBA,2BCqGS2B,G,MAtHa,WAC1B,IAAMC,EAA2B,KAAnBhC,OAAOiC,WACfC,EAA4B,KAAnBlC,OAAOiC,WAChBE,EAAWxE,iBAAoB,MAC/ByE,EAAWzE,iBAAoB,MAC/B0E,EAAW1E,iBAAoB,MAC/B2E,EAAiB3E,iBAA0B,MAC3CY,EAAkBpE,aACtB,SAACC,GAAD,OAAkBA,EAAMqD,OAAOc,mBAE3BrE,EAAWC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,MAAMH,YACrDsD,EAAOrD,aAAY,SAACC,GAAD,OAAkBA,EAAMqD,OAAOD,QAClDX,EAAiB1C,aACrB,SAACC,GAAD,OAAkBA,EAAMqD,OAAOZ,kBAE3B1B,EAAWC,cAkEjB,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CACEoF,MAAO6B,EAAStE,QAChBqC,YAAakC,EAAevE,UAE9B,uBACA,uBACA,eAAC,IAAD,CACEwE,MAAOP,EACPQ,OAAQN,EACRtE,IAAKuE,EACL7C,UAAU,eAJZ,UAME,eAAC,IAAD,WACE,cAAC,IAAD,CAAMiD,MAAOP,EAAOQ,OAAQN,EAAQO,KAAK,UACzC,cAAC,IAAD,CACE5G,MAAOgE,EAAUtB,EAAgB1D,KACjC0H,MAAOP,EACPQ,OAAQN,EACRtE,IAAKwE,EACLtE,QAAS,kBAAMqC,EAAiBmC,EAAevE,eAGnD,cAAC,IAAD,CAAOH,IAAKyE,EAAZ,SACE,cAAC,IAAD,CAAazE,IAAK0E,SAGtB,uBACA,cAAC,EAAD,CAAazB,eAvCM,SAACf,GACtB,IAAMjE,EAAQ,IAAI6G,IAAMzC,MAAM,CAC5BpE,MAAOgE,EAAUC,GACjByC,MAAO,GACPC,OAAQ,GACRG,WAAW,IAEbrC,EAAezE,EAAOwG,EAAStE,QAASuE,EAAevE,YAiCrD,wBAAQD,QA/Fe,WACzB,GAAIqE,EAASpE,QAAS,CACpB,IAAiB6E,EAAUT,EAAnBpE,QACR,EAA6BQ,EAArBvB,iBAAR,MAAoB,KAApB,EAEA,GADAmD,EAAiBmC,EAAevE,SAC5BP,IAAS3D,EAAWkB,MAAO,CAC7B,GAA6B,SAAzBwD,EAAgBU,KAGlB,OAFAlC,EAAkB7C,QAClB0B,EAAsB1B,EAAU0I,EAAMC,UAAU,CAAEC,WAAY,KAGhElH,EAAsB1B,EAAU0I,EAAMC,UAAU,CAAEC,WAAY,KXR3B,SACzC5I,EACA2B,GAEIA,IACCF,IACHA,EAAgB,IAAIG,iBAEtBH,EAAcI,KAAKF,GAAO,SAACG,GACzB9B,EAAS+B,SAAQ,YAAmB,IAAhBlC,EAAe,EAAfA,SAClBiC,EAAQE,MAAQC,iBAChBH,EAAQI,MAAQD,iBAChBH,EAAQK,OAAQ,EAChBL,EAAQM,OAAOC,IAAI,IAAK,KAExB,IAAMC,EAAaR,EAAQS,QAC3B1C,EAASiD,UAAYR,EACrBzC,EAASiD,UAAUN,aAAc,EACjC3C,EAAS2C,aAAc,EACvBF,EAAWG,aAEbX,EAAQW,cWZJoG,CAA4B7I,EAAU8C,QACjC,GAAIQ,IAAS3D,EAAW6B,KAAM,CACnC,GAA6B,SAAzB6C,EAAgBU,KAOlB,OANA3B,EAAiBT,EAAgB3C,QACjC0C,EACEC,EACA3C,EACA0I,EAAMC,UAAU,CAAEC,WAAY,KAAOd,KAIzCpF,EACEC,EACA3C,EACA0I,EAAMC,UAAU,CAAEC,WAAY,KAAOd,KXwBL,SACxCnF,EACA3C,EACA2B,GAEA,GAAIgB,GAAmBhB,EAAvB,CACKF,IACHA,EAAgB,IAAIG,iBAEtB,IAAQ/B,EAAaG,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACR4B,EAAcI,KAAKF,GAAO,SAACG,GACzBA,EAAQE,MAAQC,iBAChBH,EAAQI,MAAQD,iBAChBH,EAAQK,OAAQ,EAChBL,EAAQM,OAAOC,IAAI,IAAK,KACxBxC,EAASiD,UAAYhB,EACrBjC,EAASiD,UAAUN,aAAc,EACjC3C,EAAS2C,aAAc,EACvBV,EAAQW,cWxCJqG,CAA2BnG,EAAgB3C,EAAU8C,MAmEvD,mBACA,yBAAQc,QAjDe,WACrBN,IAAS3D,EAAW6B,KACtB4B,EAAiBT,EAAgB3C,GACxBsD,IAAS3D,EAAWkB,OAC7BgC,EAAkB7C,IA6ClB,mBAA4CsD,KAC5C,wBAAQM,QAhEc,WACpBuE,EAAStE,SACgBsE,EAAnBtE,QAEekF,aAAY,SAACvC,GAClC,MAA+B,gBAAxBA,EAAKwC,kBAELjH,SAAQ,SAACkH,GAChBA,EAAMC,aAGVjI,EAASmD,EAAmBsB,KAqD1B,+BC7DSyD,EA7DQ,WACrB,IAAMnJ,EAAWC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,MAAMH,YACrDsD,EAAOrD,aAAY,SAACC,GAAD,OAAkBA,EAAMqD,OAAOD,QAClDX,EAAiB1C,aACrB,SAACC,GAAD,OAAkBA,EAAMqD,OAAOZ,kBA4BjC,OACE,eAAC,WAAD,WACE,uBADF,KAGE,uBACErB,KAAK,QACL8H,IAAI,MACJC,IAAI,KACJ1F,aAAa,IACb2F,KAAK,OACLnE,SApCwB,SAACN,GAC7B,IAAQf,EAAUe,EAAMrE,OAAhBsD,MAEJR,IAAS3D,EAAWkB,MZqIQ,SAACb,EAAsB8D,GACzD9D,EAAS+B,SAAQ,YAAmB,IAAhBlC,EAAe,EAAfA,SACbA,EAASc,MACdd,EAASc,IAAI4I,OAAOC,EAAI1F,MYvItB2F,CAAqBzJ,EAAU0J,WAAW5F,IACnCR,IAAS3D,EAAW6B,MZiJE,SACjCxB,EACA2C,EACAmB,GAEA,GAAInB,EAAJ,CACA,IAAQ9C,EAAaG,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACHA,EAASc,MACdd,EAASc,IAAI4I,OAAOC,EAAI1F,IYxJpB6F,CAAoB3J,EAAU2C,EAAgB+G,WAAW5F,OAgCzD,uBAXF,KAaE,uBACExC,KAAK,QACL8H,IAAI,MACJC,IAAI,KACJ1F,aAAa,IACb2F,KAAK,OACLnE,SArCwB,SAACN,GAC7B,IAAQf,EAAUe,EAAMrE,OAAhBsD,MAEJR,IAAS3D,EAAWkB,MZmIQ,SAACb,EAAsB8D,GACzD9D,EAAS+B,SAAQ,YAAmB,IAAhBlC,EAAe,EAAfA,SACbA,EAASc,MACdd,EAASc,IAAI4I,OAAOK,EAAI9F,MYrItB+F,CAAqB7J,EAAU0J,WAAW5F,IACnCR,IAAS3D,EAAW6B,MZmJE,SACjCxB,EACA2C,EACAmB,GAEA,GAAInB,EAAJ,CACA,IAAQ9C,EAAaG,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACHA,EAASc,MACdd,EAASc,IAAI4I,OAAOK,EAAI9F,IY1JpBgG,CAAoB9J,EAAU2C,EAAgB+G,WAAW5F,OAiCzD,uBArBF,SAuBE,uBAAOxC,KAAK,QAAQ8H,IAAI,MAAMzF,aAAa,MAAM0F,IAAI,IAAIC,KAAK,OAAOnE,SAhC5C,SAACN,GAC5B,IAAQf,EAAUe,EAAMrE,OAAhBsD,MACJR,IAAS3D,EAAWkB,MZwJa,SAACb,EAAsB8D,GAC9D9D,EAAS+B,SAAQ,YAAmB,IAAhBlC,EAAe,EAAfA,SACbA,EAASc,KACdd,EAASc,IAAIyB,OAAOC,IAAI,EAAEyB,EAAM,EAAEA,MY1JhCiG,CAA0B/J,EAAU0J,WAAW5F,IACxCR,IAAS3D,EAAW6B,MZ6JO,SACtCxB,EACA2C,EACAmB,GAEA,GAAInB,EAAJ,CACA,IAAQ9C,EAAaG,EAAS4C,MAAK,qBAAGhC,OAAoB+B,KAAlD9C,SACHA,EAASc,KACdd,EAASc,IAAIyB,OAAOC,IAAI,EAAEyB,EAAM,EAAEA,IYpK9BkG,CAAyBhK,EAAU2C,EAAgB+G,WAAW5F,WClBrDmG,EAdQ,WACrB,IAAM3G,EAAOrD,aAAY,SAACC,GAAD,OAAgBA,EAAMqD,OAAOD,QACtD,OACE,eAAC,WAAD,WACE,cAAC,EAAD,IACCA,IAAS3D,EAAW6B,MAAQ,cAAC,EAAD,IAC7B,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,QCRO8D,EAA6B,CACxC,CACEP,KAAM,OACNpE,IAAK,KACLmC,UAAW,MAEb,CACEiC,KAAM,SACNpE,ICnBW,IAA0B,mCDoBrCmC,UEpBW,IAA0B,oCFsBvC,CACEiC,KAAM,kBACNpE,IGxBW,IAA0B,4CHyBrCmC,UIzBW,IAA0B,6CJ2BvC,CACEiC,KAAM,UACNpE,IK7BW,IAA0B,oCL8BrCmC,UM9BW,IAA0B,qCNgCvC,CACEiC,KAAM,aACNpE,IOlCW,IAA0B,uCPmCrCmC,UQnCW,IAA0B,wCRqCvC,CACEiC,KAAM,QACNpE,ISvCW,IAA0B,kCTwCrCmC,UUxCW,IAA0B,oCCG5ByE,EAAyB,CACpC,CACExC,KAAM,OACNzD,KAAMkH,IAAM0B,KACZtC,OAAQ,CACNS,MAAO,GACPC,OAAQ,GACRC,KAAM,MACN4B,OAAQ,QACRC,YAAa,EACb3B,WAAU,IAGd,CACE1D,KAAM,OACNzD,KAAMkH,IAAM6B,KACZzC,OAAQ,CACN0C,UAAW,EACXC,YAAa,GACbC,YAAa,GACbjC,KAAM,MACN4B,OAAQ,QACRC,YAAa,EACb3B,WAAU,IAGd,CACE1D,KAAM,SACNzD,KAAMkH,IAAMiC,OACZ7C,OAAQ,CACN8C,OAAQ,GACRnC,KAAM,MACN4B,OAAQ,QACRC,YAAa,EACb3B,WAAU,IAGd,CACE1D,KAAM,OACNzD,KAAMkH,IAAMmC,KACZ/C,OAAQ,CACN2C,YAAa,GACbC,YAAa,GACbjC,KAAM,MACN4B,OAAQ,QACRC,YAAa,EACb3B,WAAU,KC7CVmC,EAA4B,CAChCtH,KAAM3D,EAAWkB,MACjB8B,oBAAgBkI,EAChBvF,cACAjB,gBAAiBiB,EAAY,GAC7BiC,YACAC,cAAeD,EAAU,GACzBuD,UAAU,EACVC,UAAU,GCTNH,EAA2B,CAC/B9J,MCJa,IAA0B,kCDKvCd,SAAU,IEFGgL,cAAgB,CAC7BzH,OHW2B,WAAyC,IAAxCrD,EAAuC,uDAA/B0K,EAAeK,EAAgB,uCAC3D3J,EAAS2J,EAAT3J,KACR,OAAQA,GACN,KAAK5B,EAAayE,gBAChB,IAAQxB,EAAmBsI,EAAnBtI,eACR,OAAO,2BAAKzC,GAAZ,IAAmByC,mBAErB,KAAKjD,EAAaoF,cAChB,IAAQxB,EAAS2H,EAAT3H,KACR,OAAO,2BAAKpD,GAAZ,IAAmBoD,SAErB,KAAK5D,EAAa4E,mBAChB,IAAQD,EAAoB4G,EAApB5G,gBACR,OAAO,2BAAKnE,GAAZ,IAAmBmE,oBAErB,KAAK3E,EAAa+H,iBAChB,IAAQD,EAAkByD,EAAlBzD,cACR,OAAO,2BAAKtH,GAAZ,IAAmBsH,kBAEnB,KAAK9H,EAAawL,aAChB,IAAOJ,EAAaG,EAAbH,UACP,OAAO,2BAAI5K,GAAX,IAAiB4K,cAErB,KAAKpL,EAAayL,aAChB,IAAOJ,EAAaE,EAAbF,UACP,OAAO,2BAAI7K,GAAX,IAAiB6K,cACnB,QACE,OAAO7K,IGrCXC,MFE0B,WAGtB,IAFJD,EAEG,uDAFK0K,EACRK,EACG,uCACK3J,EAAS2J,EAAT3J,KACR,OAAQA,GACN,KAAK7B,EAAa8B,YAChB,IAAQvB,EAAaiL,EAAbjL,SACR,OAAO,2BAAKE,GAAZ,IAAmBF,aAErB,KAAKP,EAAa2L,iBAChB,IAAQC,EAAeJ,EAAfI,WACR,OAAO,2BAAKnL,GAAZ,IAAmBmL,eAErB,QACE,OAAOnL,MGKEoL,EApBH,WACV,IAAMC,EAAQC,YAAYC,GAC1B,OACE,qBAAKrG,UAAU,MAAf,SACE,cAAC,WAAD,CAAUsG,SAAU,KAApB,SACE,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,sBAAKnG,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,gBCJCuG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d5a9924.chunk.js","sourcesContent":["export enum ShirtActions{\n    ChangeShirtModel = \"CHANGE_SHIRT_MODEL\",\n    ChangePartColor = \"CHANGE_PART_COLOR\",\n    SetPartList = \"SET_PART_LIST\"\n}","import { Mesh } from \"three\";\nimport { ShirtActions } from \"../../common/enums/shirt\";\n\nexport const setPartList = (partList: Array<Mesh>) => {\n  return {\n    type: ShirtActions.SetPartList,\n    partList,\n  };\n};\n\nexport const changeShirtModel = (shirtModel: string) => {\n  return {\n    type: ShirtActions.ChangeShirtModel,\n    shirtModel,\n  };\n};\n","export enum EditorAction {\n  SetSelectedPart = \"SET_SELECTED_PART\",\n  SetEditorMode = \"SET_EDITOR_MODE\",\n  SetSelectedTexture = \"SET_SELECTED_TEXTURE\",\n  SetSelectedShape = \"SET_SELECTED_SHAPE\",\n  SetXPosition = \"SET_X_POSITION\",\n  SetYPosition = \"SET_Y_POSITION\",\n}\n\nexport enum EditorMode {\n  Shirt = \"Shirt\",\n  Part = \"Part\",\n}\n","import { FC } from \"react\";\nimport { Props } from \"./types\";\n\nconst ShirtPart:FC<Props> = ({material,geometry}) => {\n    return <mesh\n    geometry={geometry}\n    material={material}\n    />\n}\n\nexport default ShirtPart;","import { Environment, OrbitControls } from \"@react-three/drei\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { FC, Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Mesh } from \"three\";\nimport ShirtPart from \"./ShirtPart\";\nimport { State } from \"./types\";\nconst ShirtDisplay: FC<{}> = () => {\n  const partList = useSelector((state: State) => state.shirt.partList);\n  if (!partList.length) {\n    return null;\n  }\n  return (\n    <Fragment>\n      <Canvas camera={{ position: [0, 0, 80] }}>\n        <OrbitControls target={[0,-10,0]}/>\n        <Environment preset=\"sunset\" />\n        {partList.map(({ geometry, material, uuid }: Mesh) => {\n          return (\n            <ShirtPart geometry={geometry} material={material} key={uuid} />\n          );\n        })}\n      </Canvas>\n    </Fragment>\n  );\n};\nexport default ShirtDisplay;\n","import { useGLTF } from \"@react-three/drei\";\nimport { useEffect } from \"react\";\nimport { FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPartList } from \"../../redux/actions/shirt\";\nimport ShirtDisplay from \"./ShirtDisplay\";\nimport { State } from \"./types\";\nconst Shirt: FC<{}> = () => {\n  const model = useSelector((state: State) => state.shirt.model);\n  const gltf: any = useGLTF(model, true);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const { children } = gltf.scene;\n    dispatch(setPartList(children));\n  }, [dispatch, gltf.scene]);\n\n  return <ShirtDisplay />;\n};\n\nexport default Shirt;\n","export const EditorMode = {\n    Shirt:\"Shirt\",\n    Part: \"Part\"\n}\n","import { Color, RepeatWrapping, TextureLoader } from \"three\";\n\nlet textureLoader: TextureLoader | null = null;\n\nexport const changePartColor = (\n  selectedPartID: string | undefined,\n  partList: Array<any>,\n  color: string\n) => {\n  if(selectedPartID) return;\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  material.color = new Color(color);\n};\n\nexport const changeShirtColor = (partList: Array<any>, color: string) => {\n  partList.forEach(({ material }) => {\n    material.color = new Color(color);\n  });\n};\n\nexport const changeShirtTextureMap = (partList: Array<any>, image: string) => {\n  if (!textureLoader) {\n    textureLoader = new TextureLoader();\n  }\n  textureLoader.load(image, (texture) => {\n    partList.forEach(({ material }) => {\n      texture.wrapS = RepeatWrapping;\n      texture.wrapT = RepeatWrapping;\n      texture.flipY = false;\n      texture.repeat.set(1.1, 1.1);\n      //clone texture to generate a unique texture\n      const newTexture = texture.clone();\n      material.map = newTexture;\n      material.map.needsUpdate = true;\n      material.needsUpdate = true;\n      newTexture.dispose();\n    });\n    texture.dispose();\n  });\n};\n\nexport const changeShirtTextureNormalMap = (\n  partList: Array<any>,\n  image: string | null\n) => {\n  if(!image) return;\n  if (!textureLoader) {\n    textureLoader = new TextureLoader();\n  }\n  textureLoader.load(image, (texture) => {\n    partList.forEach(({ material }) => {\n      texture.wrapS = RepeatWrapping;\n      texture.wrapT = RepeatWrapping;\n      texture.flipY = false;\n      texture.repeat.set(1.1, 1.1);\n      //clone texture to generate a unique texture\n      const newTexture = texture.clone();\n      material.normalMap = newTexture;\n      material.normalMap.needsUpdate = true;\n      material.needsUpdate = true;\n      newTexture.dispose();\n    });\n    texture.dispose();\n  });\n};\n\nexport const changePartTextureMap = (\n  selectedPartID: string | undefined,\n  partList: Array<any>,\n  image: string\n) => {\n  if(!selectedPartID) return;\n  if (!textureLoader) {\n    textureLoader = new TextureLoader();\n  }\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  textureLoader.load(image, (texture) => {\n    texture.wrapS = RepeatWrapping;\n    texture.wrapT = RepeatWrapping;\n    texture.flipY = false;\n    texture.repeat.set(1.1, 1.1);\n    material.map = texture;\n    material.map.needsUpdate = true;\n    material.needsUpdate = true;\n    texture.dispose();\n  });\n};\n\nexport const changePartTextureNormalMap = (\n  selectedPartID: string | undefined,\n  partList: Array<any>,\n  image: string | null\n) => {\n  if(!selectedPartID || !image) return;\n  if (!textureLoader) {\n    textureLoader = new TextureLoader();\n  }\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  textureLoader.load(image, (texture) => {\n    texture.wrapS = RepeatWrapping;\n    texture.wrapT = RepeatWrapping;\n    texture.flipY = false;\n    texture.repeat.set(1.1, 1.1);\n    material.normalMap = texture;\n    material.normalMap.needsUpdate = true;\n    material.needsUpdate = true;\n    texture.dispose();\n  });\n};\n\nexport const resetShirtTexture = (partList: Array<any>) => {\n  partList.forEach(({ material }) => {\n    if (material.map) {\n      material.map.dispose();\n      material.map = null;\n    }\n    if (material.normalMap) {\n      material.normalMap.dispose();\n      material.normalMap = null;\n    }\n    if (material.bumpMap) {\n      material.bumpMap.dispose();\n      material.bumpMap = null;\n    }\n    material.color.r = 1;\n    material.color.g = 1;\n    material.color.b = 1;\n    material.needsUpdate = true;\n  });\n};\n\nexport const resetPartTexture = (\n  selectedPartID: string | undefined,\n  partList: Array<any>\n) => {\n  if(!selectedPartID) return;\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  if (material.map) {\n    material.map.dispose();\n    material.map = null;\n  }\n  if (material.normalMap) {\n    material.normalMap.dispose();\n    material.normalMap = null;\n  }\n  if (material.bumpMap) {\n    material.bumpMap.dispose();\n    material.bumpMap = null;\n  }\n  material.color.r = 1;\n  material.color.g = 1;\n  material.color.b = 1;\n  material.needsUpdate = true;\n};\n\nexport const changeShirtXPosition = (partList: Array<any>, value: number) => {\n  partList.forEach(({ material }) => {\n    if (!material.map) return;\n    material.map.center.x = value;\n  });\n};\n\nexport const changeShirtYPosition = (partList: Array<any>, value: number) => {\n  partList.forEach(({ material }) => {\n    if (!material.map) return;\n    material.map.center.y = value;\n  });\n};\n\nexport const changePartXPosition = (\n  partList: Array<any>,\n  selectedPartID: string | undefined,\n  value: number\n) => {\n  if(!selectedPartID) return\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  if (!material.map) return;\n  material.map.center.x = value;\n};\n\nexport const changePartYPosition = (\n  partList: Array<any>,\n  selectedPartID: string | undefined,\n  value: number\n) => {\n  if(!selectedPartID) return\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  if (!material.map) return;\n  material.map.center.y = value;\n};\n\nexport const changeShirtTextureScaling = (partList: Array<any>, value: number) => {\n  partList.forEach(({ material }) => {\n    if (!material.map) return;\n    material.map.repeat.set(1/value,1/value)\n  });\n};\n\nexport const changePartTextureScaling = (\n  partList: Array<any>,\n  selectedPartID: string | undefined,\n  value: number\n) => {\n  if(!selectedPartID) return\n  const { material } = partList.find(({ uuid }) => uuid === selectedPartID);\n  if (!material.map) return;\n  material.map.repeat.set(1/value,1/value)\n};\n","import { Fragment, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { EditorMode } from \"../../../common/constants/editor\";\nimport { changePartColor, changeShirtColor } from \"../../../utils/shirt\";\nimport { State } from \"./types\";\n\nconst ColorPicker = () => {\n  const partList = useSelector((state: State) => state.shirt.partList);\n  const mode = useSelector((state: State) => state.editor.mode);\n  const selectedPartID = useSelector(\n    (state: State) => state.editor.selectedPartID\n  );\n  const colorRef = useRef(null);\n  const handleApplyColor = () => {\n    if (colorRef.current) {\n      const { value }: any = colorRef.current;\n      if (mode === EditorMode.Shirt) {\n        changeShirtColor(partList, value);\n      } else if (mode === EditorMode.Part) {\n        changePartColor(selectedPartID, partList, value);\n      }\n    }\n  };\n\n  return (\n    <Fragment>\n      Color: &nbsp;\n      <input type=\"color\" ref={colorRef} defaultValue=\"#ffffff\" />\n      <button onClick={handleApplyColor}>Apply Color</button>\n      <br />\n    </Fragment>\n  );\n};\n\nexport default ColorPicker;\n","import { EditorAction } from \"../../common/enums/editor\"\nimport { Shape, Texture } from \"./types\"\n\nexport const setSelectedPart = (selectedPartID:string) => {\n    return {\n        type: EditorAction.SetSelectedPart,\n        selectedPartID\n    }\n}\n\nexport const setEditorMode = (mode:string) => {\n    return {\n        type: EditorAction.SetEditorMode,\n        mode\n    }\n}\n\nexport const setSelectedTexture = (selectedTexture:Texture) => {\n    return {\n        type: EditorAction.SetSelectedTexture,\n        selectedTexture\n    }\n}\n\nexport const setSelectedShape = (selectedShape:Shape) => {\n    return {\n        type: EditorAction.SetSelectedShape,\n        selectedShape\n    }\n}\n\nexport const setXPosition = (xPosition:number) => {\n    return {\n        type:EditorAction.SetXPosition,\n        xPosition\n    }\n}\n\n\nexport const setYPosition = (yPosition:number) => {\n    return {\n        type:EditorAction.SetYPosition,\n        yPosition\n    }\n}\n","import { FC, Fragment, MouseEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditorMode } from \"../../../common/constants/editor\";\nimport { setEditorMode } from \"../../../redux/actions/editor\";\nimport { State } from \"../ColorPicker/types\";\nconst ModePicker: FC<{}> = () => {\n  const modeList = Object.values(EditorMode);\n  const selectedMode = useSelector((state: State) => state.editor.mode);\n  const dispatch = useDispatch();\n  const handleChangeMode = (event: MouseEvent<HTMLElement>) => {\n    const {value} = event.target as HTMLInputElement\n    dispatch(setEditorMode(value));\n  };\n\n  return (\n    <Fragment>\n      Mode: &nbsp;\n      {modeList.map((mode: string) => {\n        return (\n          <Fragment key={mode}>\n            <input\n              type=\"radio\"\n              name=\"editor_mode\"\n              value={mode}\n              defaultChecked={mode === selectedMode}\n              onClick={handleChangeMode}\n            />\n            <label htmlFor=\"model\">{mode}</label>\n          </Fragment>\n        );\n      })}\n      <br/>\n    </Fragment>\n  );\n};\n\nexport default ModePicker;\n","import { Fragment, useEffect } from \"react\";\nimport { FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Mesh } from \"three\";\nimport { setSelectedPart } from \"../../../redux/actions/editor\";\nimport { State } from \"../ColorPicker/types\";\nconst PartPicker: FC<{}> = () => {\n  const partList = useSelector((state: State) => state.shirt.partList);\n  const selectedPartID = useSelector(\n    (state: State) => state.editor.selectedPartID\n  );\n  const dispatch = useDispatch();\n  const handleChangeSelectedPart = (event: any) => {\n    const { value } = event.target;\n    dispatch(setSelectedPart(value));\n  };\n\n  useEffect(() => {\n    if (partList.length && !selectedPartID) {\n      dispatch(setSelectedPart(partList[0].uuid));\n    }\n  });\n\n  return (\n    <Fragment>\n      Parts: &nbsp;\n      <select onChange={handleChangeSelectedPart} className=\"fullWidth\">\n        {partList.map(({ name, uuid }: Mesh) => {\n          return (\n            <option value={uuid} key={uuid}>\n              {name}\n            </option>\n          );\n        })}\n      </select>\n      <br/>\n    </Fragment>\n  );\n};\n\nexport default PartPicker;\n","import { ChangeEvent, FC, Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSelectedTexture } from \"../../../redux/actions/editor\";\nimport { State, Texture } from \"./types\";\nconst TexturePicker: FC<{}> = () => {\n  const textureList = useSelector((state: State) => state.editor.textureList);\n  const selectedTexture = useSelector(\n    (state: State) => state.editor.selectedTexture\n  );\n  const dispatch = useDispatch();\n  const handleChangeTexture = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n    dispatch(setSelectedTexture(textureList[parseInt(value)]));\n  };\n\n  return (\n    <Fragment>\n      <br />\n      Texture: &nbsp;\n      <select\n        value={textureList.findIndex(\n          (texture: Texture) => texture.name === selectedTexture.name\n        )}\n        onChange={handleChangeTexture}\n      >\n        {textureList.map((texture: Texture, index: number) => {\n          return (\n            <option value={index} key={texture.name}>\n              {texture.name}\n            </option>\n          );\n        })}\n      </select>\n      <br /> <br />\n    </Fragment>\n  );\n};\n\nexport default TexturePicker;\n","export const Defaults = {\n  defaultTexture: {\n    name: \"None\",\n    map: null,\n    normalMap: null,\n  },\n};\n","export const loadImage = (imageURL: string | null) => {\n  if (!imageURL) return undefined;\n  const img = new window.Image();\n  img.src = imageURL;\n  return img;\n};\n","import { Layer } from \"konva/lib/Layer\";\nimport { Image as KonvaImage } from \"konva/lib/shapes/Image\";\nimport { Transformer } from \"konva/lib/shapes/Transformer\";\n\nexport const clearTransformer = (transformer: Transformer | null) => {\n  if (!transformer) return;\n  transformer.nodes([]);\n};\n\nexport const createShape = (type: any, config: Object) => {\n  return new type(config);\n};\n\nexport const addItemToLayer = (\n  item: any,\n  layer: Layer | null,\n  transformer: Transformer | null\n) => {\n  item.on(\"click\", () => {\n    if (transformer) {\n      const found = transformer.nodes().find((node: any) => node === item);\n      //add image to transformer when clicked\n      if (!found) {\n        transformer.nodes([item]);\n        return;\n      }\n      clearTransformer(transformer);\n    }\n  });\n  if(layer) layer.add(item);\n};\n\nexport const addImageToStage = (image:string,imageItem: KonvaImage | null) => {\n    if(!image || !imageItem) return\n    const img = new Image();\n    img.src = image;\n    \n}\n","import { FC, useRef } from \"react\";\nimport { Props } from \"./types\";\nimport \"./styles.css\";\nconst ImageUpload: FC<Props> = ({ handleAddImage }) => {\n  const imageUploadRef: any = useRef(null);\n  const changeImage = () => {\n    const {current:input} = imageUploadRef;\n    var reader;\n\n    if (input.files && input.files[0]) {\n      reader = new FileReader();\n      reader.onloadend = function (event: any) {\n        const { result } = event.target;\n        handleAddImage(result);\n        //reset value to enable multiple addition of the same image\n        input.value = null;\n      };\n      reader.readAsDataURL(input.files[0]);\n    }\n  };\n\n  return (\n    <>\n      <label className=\"label-button\">\n        Add Image   \n        <input\n          type=\"file\"\n          onChange={changeImage}\n          ref={imageUploadRef}\n          hidden\n          accept=\"image/png, image/gif, image/jpeg\"\n        />\n      </label>\n    </>\n  );\n};\n\nexport default ImageUpload;\n","import { FC, Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSelectedShape } from \"../../../../redux/actions/editor\";\nimport { addItemToLayer, createShape } from \"../../../../utils/konva\";\nimport { Props } from \"./types\";\n\nconst ShapePicker: FC<Props> = ({ layer, transformer }) => {\n  const shapeList = useSelector((state: any) => state.editor.shapeList);\n  const selectedShape = useSelector((state: any) => state.editor.selectedShape);\n  const dispatch = useDispatch();\n\n  const handleChangeSelectedShape = (event: any) => {\n    const { value } = event.target;\n    dispatch(setSelectedShape(shapeList[value]));\n  };\n\n  const handleAddShape = () => {\n    addItemToLayer(\n      createShape(selectedShape.type, selectedShape.config),\n      layer,\n      transformer\n    );\n  };\n\n  return (\n    <Fragment>\n      Shape: &nbsp;\n      <select\n        defaultChecked={selectedShape.name}\n        onChange={handleChangeSelectedShape}\n      >\n        {shapeList.map((shape: any, index: number) => {\n          return (\n            <option value={index} key={index}>\n              {shape.name}\n            </option>\n          );\n        })}\n      </select>\n      <button onClick={handleAddShape}>Add Shape</button>\n    </Fragment>\n  );\n};\n\nexport default ShapePicker;\n","import Konva from \"konva\";\nimport { useRef } from \"react\";\nimport { FC, Fragment } from \"react\";\nimport { Layer, Rect, Stage, Image, Transformer } from \"react-konva\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Defaults } from \"../../../common/constants/default\";\nimport { EditorMode } from \"../../../common/constants/editor\";\nimport { setSelectedTexture } from \"../../../redux/actions/editor\";\nimport { loadImage } from \"../../../utils/image\";\nimport { addItemToLayer, clearTransformer } from \"../../../utils/konva\";\nimport {\n  changePartTextureMap,\n  changePartTextureNormalMap,\n  changeShirtTextureMap,\n  changeShirtTextureNormalMap,\n  resetPartTexture,\n  resetShirtTexture,\n} from \"../../../utils/shirt\";\nimport ImageUpload from \"./ImageUploader\";\nimport ShapePicker from \"./ShapePicker\";\nimport { State } from \"./types\";\nimport \"./styles.css\";\nconst KonvaCanvas: FC<{}> = () => {\n  const WIDTH = window.innerWidth *0.341;\n  const HEIGHT = window.innerWidth *0.342;\n  const stageRef = useRef<Konva.Stage>(null);\n  const imageRef = useRef<Konva.Image>(null);\n  const layerRef = useRef<Konva.Layer>(null);\n  const transformerRef = useRef<Konva.Transformer>(null);\n  const selectedTexture = useSelector(\n    (state: State) => state.editor.selectedTexture\n  );\n  const partList = useSelector((state: State) => state.shirt.partList);\n  const mode = useSelector((state: State) => state.editor.mode);\n  const selectedPartID = useSelector(\n    (state: State) => state.editor.selectedPartID\n  );\n  const dispatch = useDispatch();\n  const handleApplyTexture = () => {\n    if (stageRef.current) {\n      const { current: stage } = stageRef;\n      const { normalMap = null } = selectedTexture;\n      clearTransformer(transformerRef.current);\n      if (mode === EditorMode.Shirt) {\n        if (selectedTexture.name === \"None\") {\n          resetShirtTexture(partList);\n          changeShirtTextureMap(partList, stage.toDataURL({ pixelRatio: 5 }));\n          return;\n        }\n        changeShirtTextureMap(partList, stage.toDataURL({ pixelRatio: 5 }));\n        changeShirtTextureNormalMap(partList, normalMap);\n      } else if (mode === EditorMode.Part) {\n        if (selectedTexture.name === \"None\") {\n          resetPartTexture(selectedPartID, partList);\n          changePartTextureMap(\n            selectedPartID,\n            partList,\n            stage.toDataURL({ pixelRatio: 4096 / WIDTH })\n          );\n          return;\n        }\n        changePartTextureMap(\n          selectedPartID,\n          partList,\n          stage.toDataURL({ pixelRatio: 4096 / WIDTH })\n        );\n        changePartTextureNormalMap(selectedPartID, partList, normalMap);\n      }\n    }\n  };\n\n  const handleClearCanvas = () => {\n    if (layerRef.current) {\n      const { current: layer } = layerRef;\n      //clear all items in canvas\n      const children = layer.getChildren((node) => {\n        return node.getClassName() !== \"Transformer\";\n      });\n      children.forEach((child: any) => {\n        child.destroy();\n      });\n    }\n    dispatch(setSelectedTexture(Defaults.defaultTexture));\n  };\n\n  const handleClearTexture = () => {\n    if (mode === EditorMode.Part) {\n      resetPartTexture(selectedPartID, partList);\n    } else if (mode === EditorMode.Shirt) {\n      resetShirtTexture(partList);\n    }\n  };\n\n  const handleAddImage = (imageURL: string) => {\n    const image = new Konva.Image({\n      image: loadImage(imageURL),\n      width: 50,\n      height: 50,\n      draggable: true,\n    });\n    addItemToLayer(image, layerRef.current, transformerRef.current);\n  };\n\n  return (\n    <Fragment>\n      <ShapePicker\n        layer={layerRef.current}\n        transformer={transformerRef.current}\n      />\n      <br />\n      <br />\n      <Stage\n        width={WIDTH}\n        height={HEIGHT}\n        ref={stageRef}\n        className=\"konva-canvas\"\n      >\n        <Layer>\n          <Rect width={WIDTH} height={HEIGHT} fill=\"white\" />\n          <Image\n            image={loadImage(selectedTexture.map)}\n            width={WIDTH}\n            height={HEIGHT}\n            ref={imageRef}\n            onClick={() => clearTransformer(transformerRef.current)}\n          />\n        </Layer>\n        <Layer ref={layerRef}>\n          <Transformer ref={transformerRef}></Transformer>\n        </Layer>\n      </Stage>\n      <br />\n      <ImageUpload handleAddImage={handleAddImage} />\n      <button onClick={handleApplyTexture}>Apply</button>\n      <button onClick={handleClearTexture}>Clear {mode}</button>\n      <button onClick={handleClearCanvas}>Clear Canvas</button>\n    </Fragment>\n  );\n};\n\nexport default KonvaCanvas;\n","import { ChangeEvent, FC, Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { EditorMode } from \"../../../common/constants/editor\";\nimport {\n  changePartTextureScaling,\n  changePartXPosition,\n  changePartYPosition,\n  changeShirtTextureScaling,\n  changeShirtXPosition,\n  changeShirtYPosition,\n} from \"../../../utils/shirt\";\nimport { State } from \"./types\";\n\nconst Slider: FC<{}> = () => {\n  const partList = useSelector((state: State) => state.shirt.partList);\n  const mode = useSelector((state: State) => state.editor.mode);\n  const selectedPartID = useSelector(\n    (state: State) => state.editor.selectedPartID\n  );\n  const handleXPositionChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    // dispatch(setXPosition(parseFloat(value)));\n    if (mode === EditorMode.Shirt)\n      changeShirtXPosition(partList, parseFloat(value));\n    else if (mode === EditorMode.Part)\n      changePartXPosition(partList, selectedPartID, parseFloat(value));\n  };\n\n  const handleYPositionChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    // dispatch(setYPosition(parseFloat(value)));\n    if (mode === EditorMode.Shirt)\n      changeShirtYPosition(partList, parseFloat(value));\n    else if (mode === EditorMode.Part)\n      changePartYPosition(partList, selectedPartID, parseFloat(value));\n  };\n\n  const handleTextureScaling = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    if (mode === EditorMode.Shirt)\n      changeShirtTextureScaling(partList, parseFloat(value));\n    else if (mode === EditorMode.Part)\n      changePartTextureScaling(partList, selectedPartID, parseFloat(value));\n  };\n\n  return (\n    <Fragment>\n      <br />\n      X:\n      <input\n        type=\"range\"\n        min=\"-10\"\n        max=\"10\"\n        defaultValue=\"0\"\n        step=\"0.01\"\n        onChange={handleXPositionChange}\n      />\n      <br />\n      Y:\n      <input\n        type=\"range\"\n        min=\"-10\"\n        max=\"10\"\n        defaultValue=\"0\"\n        step=\"0.01\"\n        onChange={handleYPositionChange}\n      />\n      <br />\n      Scale:\n      <input type=\"range\" min=\"0.1\" defaultValue=\"1.1\" max=\"2\" step=\"0.01\" onChange={handleTextureScaling}/>\n    </Fragment>\n  );\n};\n\nexport default Slider;\n","import { FC, Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { EditorMode } from \"../../common/constants/editor\";\nimport ColorPicker from \"./ColorPicker\";\nimport ModePicker from \"./ModePicker\";\nimport PartPicker from \"./PartPicker\";\nimport TexturePicker from \"./TexturePicker\";\nimport KonvaCanvas from \"./KonvaCanvas\";\nimport Slider from \"./Slider\";\n\nconst Editor: FC<{}> = () => {\n  const mode = useSelector((state: any) => state.editor.mode);\n  return (\n    <Fragment>\n      <ModePicker />\n      {mode === EditorMode.Part && <PartPicker />}\n      <ColorPicker />\n      <TexturePicker />\n      <KonvaCanvas />\n      <Slider/>\n    </Fragment>\n  );\n};\n\nexport default Editor;\n","import carpetMap from \"../../assets/maps/map/carpet.jpg\";\nimport carpetNormal from \"../../assets/maps/normal/carpet.jpg\";\nimport checkeredTowelMap from \"../../assets/maps/map/checkered_towel.jpg\";\nimport checkeredTowelNormal from \"../../assets/maps/normal/checkered_towel.jpg\";\nimport leatherMap from \"../../assets/maps/map/leather.jpg\";\nimport leatherNormal from \"../../assets/maps/normal/leather.jpg\";\nimport tightKnitMap from \"../../assets/maps/map/tight_knit.jpg\";\nimport tightKnitNormal from \"../../assets/maps/normal/tight_knit.jpg\";\nimport towelMap from \"../../assets/maps/map/towel.jpg\";\nimport towelNormal from \"../../assets/maps/normal/towel.jpg\";\nimport { Texture } from \"./types\";\nexport const textureList:Array<Texture> = [\n  {\n    name: \"None\",\n    map: null,\n    normalMap: null,\n  },\n  {\n    name: \"Carpet\",\n    map: carpetMap,\n    normalMap: carpetNormal,\n  },\n  {\n    name: \"Checkered Towel\",\n    map: checkeredTowelMap,\n    normalMap: checkeredTowelNormal,\n  },\n  {\n    name: \"Leather\",\n    map: leatherMap,\n    normalMap: leatherNormal,\n  },\n  {\n    name: \"Tight Knit\",\n    map: tightKnitMap,\n    normalMap: tightKnitNormal,\n  },\n  {\n    name: \"Towel\",\n    map: towelMap,\n    normalMap: towelNormal,\n  },\n];\n","export default __webpack_public_path__ + \"static/media/carpet.a8a11c0e.jpg\";","export default __webpack_public_path__ + \"static/media/carpet.4fe521da.jpg\";","export default __webpack_public_path__ + \"static/media/checkered_towel.d0ef6bb7.jpg\";","export default __webpack_public_path__ + \"static/media/checkered_towel.c99b1a4b.jpg\";","export default __webpack_public_path__ + \"static/media/leather.2a81cf18.jpg\";","export default __webpack_public_path__ + \"static/media/leather.3cd1efa8.jpg\";","export default __webpack_public_path__ + \"static/media/tight_knit.7cd984c5.jpg\";","export default __webpack_public_path__ + \"static/media/tight_knit.bdc5c65c.jpg\";","export default __webpack_public_path__ + \"static/media/towel.cda81628.jpg\";","export default __webpack_public_path__ + \"static/media/towel.6528b49b.jpg\";","import Konva from \"konva\";\nimport { Shape } from \"./types\";\n\nexport const shapeList:Array<Shape> = [\n  {\n    name: \"Rect\",\n    type: Konva.Rect,\n    config: {\n      width: 50,\n      height: 50,\n      fill: \"red\",\n      stroke: \"black\",\n      strokeWidth: 2,\n      draggable:true\n    },\n  },\n  {\n    name: \"Star\",\n    type: Konva.Star,\n    config: {\n      numPoints: 5,\n      innerRadius: 20,\n      outerRadius: 30,\n      fill: \"red\",\n      stroke: \"black\",\n      strokeWidth: 2,\n      draggable:true\n    },\n  },\n  {\n    name: \"Circle\",\n    type: Konva.Circle,\n    config: {\n      radius: 25,\n      fill: \"red\",\n      stroke: \"black\",\n      strokeWidth: 2,\n      draggable:true\n    },\n  },\n  {\n    name: \"Ring\",\n    type: Konva.Ring,\n    config: {\n      innerRadius: 20,\n      outerRadius: 30,\n      fill: \"red\",\n      stroke: \"black\",\n      strokeWidth: 2,\n      draggable:true\n    },\n  },\n];\n","import { EditorAction, EditorMode } from \"../../common/enums/editor\";\nimport { textureList } from \"../../common/constants/texture\";\nimport { shapeList } from \"../../common/constants/shapes\";\nimport { EditorState } from \"./types\";\nconst INITIAL_STATE:EditorState = {\n  mode: EditorMode.Shirt,\n  selectedPartID: undefined,\n  textureList,\n  selectedTexture: textureList[0],\n  shapeList,\n  selectedShape: shapeList[0],\n  xPosition:0,\n  yPosition:0\n};\n\nexport const editorReducer = (state = INITIAL_STATE, action: any) => {\n  const { type } = action;\n  switch (type) {\n    case EditorAction.SetSelectedPart:\n      const { selectedPartID } = action;\n      return { ...state, selectedPartID };\n\n    case EditorAction.SetEditorMode:\n      const { mode } = action;\n      return { ...state, mode };\n\n    case EditorAction.SetSelectedTexture:\n      const { selectedTexture } = action;\n      return { ...state, selectedTexture };\n\n    case EditorAction.SetSelectedShape:\n      const { selectedShape } = action;\n      return { ...state, selectedShape };\n\n      case EditorAction.SetXPosition:\n        const {xPosition} = action;\n        return {...state,xPosition}\n\n    case EditorAction.SetYPosition:\n      const {yPosition} = action;\n      return {...state,yPosition}\n    default:\n      return state;\n  }\n};\n","import { ShirtActions } from \"../../common/enums/shirt\";\nimport model from \"../../assets/model.glb\";\nimport { ShirtState } from \"./types\";\nconst INITIAL_STATE:ShirtState = {\n  model,\n  partList: [],\n}\nexport const shirtReducer = (\n  state = INITIAL_STATE,\n  action: any\n) => {\n  const { type } = action;\n  switch (type) {\n    case ShirtActions.SetPartList:\n      const { partList } = action;\n      return { ...state, partList };\n\n    case ShirtActions.ChangeShirtModel:\n      const { shirtModel } = action;\n      return { ...state, shirtModel };\n\n    default:\n      return state;\n  }\n};\n","export default __webpack_public_path__ + \"static/media/model.91f3dcc5.glb\";","import { combineReducers } from \"redux\";\nimport { editorReducer } from \"./editor\";\nimport { shirtReducer } from \"./shirt\";\nexport default combineReducers({\n  editor: editorReducer,\n  shirt: shirtReducer,\n});\n","import { Suspense } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Shirt from \"./components/Shirt\";\nimport \"./App.css\";\nimport Editor from \"./components/Editor\";\nimport allReducer from './redux/reducers/index'\nconst App = () => {\n  const store = createStore(allReducer);\n  return (\n    <div className=\"App\">\n      <Suspense fallback={null}>\n        <Provider store={store}>\n          <div className=\"row\">\n            <div className=\"editor\">\n              <Editor />\n            </div>\n            <div className=\"shirt\">\n              <Shirt />\n            </div>\n          </div>\n        </Provider>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}