{"version":3,"sources":["common/enums/actions/home.ts","state/reducers/home.ts","common/enums/actions/movie.ts","state/reducers/movie.ts","common/enums/actions/movies.ts","state/reducers/movies.ts","common/enums/actions/search.ts","state/reducers/search.ts","common/enums/path.ts","state/reducers/index.ts","common/enums/sagas/home.ts","components/NavBar/index.tsx","state/actions/home.ts","common/defaults/movie.ts","Pages/Home/MovieCarousel/index.tsx","common/enums/sagas/movies.ts","Pages/Home/index.tsx","state/actions/movies.ts","common/enums/sagas/movie.ts","components/MovieList/index.tsx","Pages/Movies/index.tsx","state/actions/movie.ts","Pages/Movie/MovieDetails/index.tsx","Pages/Movie/index.tsx","common/defaults/endpoints/home.ts","utils/home.ts","state/sagas/home.ts","utils/movies.ts","state/sagas/movies.ts","utils/movie.ts","common/enums/sagas/search.ts","state/sagas/movie.ts","state/actions/search.ts","Pages/Search/SearchResults/index.tsx","Pages/Search/index.tsx","utils/search.ts","state/sagas/search.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomeActions","MovieActions","INITIAL_STATE","popularMovieList","topRatedMovieList","upcomingMovieList","homeReducer","state","action","type","rest","SetPopularMovieList","SetTopRatedMovieList","SetUpcomingMovieList","SetMovieListFailed","MoviesActions","movieDetails","undefined","movieReducer","SetMovieDetails","SetMovieDetailsFailed","SearchActions","movieList","page","totalPage","moviesReducer","SetMovieList","Path","language","genreID","query","totalPages","error","searchReducer","SearchByLanguage","SearchByGenre","SearchByQuery","SearchMoviesFailed","combineReducers","home","movies","movie","search","HomeSaga","NavBar","history","useHistory","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","color","onClick","push","Home","Movies","LocalMovies","FormControl","variant","OutlinedInput","onKeyDown","event","nativeEvent","key","value","target","placeholder","id","size","endAdornment","InputAdornment","MovieDefaults","MoviesSaga","MovieCarousel","useSelector","message","responsive","desktop","breakpoint","max","min","items","slidesToSlide","tablet","mobile","showDots","infinite","keyBoardControl","map","Link","href","Movie","src","PosterURL","poster_path","alt","original_title","dispatch","useDispatch","SetPopularMovieListSaga","SetTopRatedMovieListSaga","SetUpcomingMovieListSaga","MovieSaga","MovieList","length","to","width","window","innerWidth","height","Container","maxWidth","Pagination","count","shape","onChange","props","match","params","SetMovieListSaga","setMovieList","MovieDetails","Card","raised","Grid","container","item","xs","CardMedia","component","title","image","List","ListItem","genres","genre","index","name","spoken_languages","iso_639_1","english_name","overview","videos","results","movieID","SetMovieDetailsSaga","API_KEY","HomeEndpoint","PopularMoviesEndpoint","TopRatedMoviesEndpoint","UpcomingMoviesEndpoint","source","axios","CancelToken","fetchMovieList","endpoint","a","get","cancelToken","token","getPopularMovieList","getTopRatedMovieListSaga","getUpcomingMovieListSaga","watchUpcomingMovieListSaga","watchSetTopRatedMovieListSaga","watchSetPopularMovieListSaga","rootSaga","call","response","data","put","takeLatest","fork","getMovieList","watchSetMovieListSaga","total_results","Math","ceil","parseInt","SearchSaga","fetchMovieDetails","getMovieDetails","watchSetMovieDetailsSaga","SearchResults","Search","SearchByQuerySaga","searchByQuery","SearchByLanguageSaga","searchByLanguage","SearchByGenreSaga","searchByGenre","fetchSearchByLanguageMovieList","fetchSearchByGenreMovieList","fetchSearchByQueryMovieList","getSearchByLanguageResults","getSearchByGenreResults","getSearchByQuery","watchSearchByQuerySaga","watchSearchByLanguageSaga","watchSearchByGenreSaga","App","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","className","exact","path","Root","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b66eb845.chunk.js","sourcesContent":["export enum HomeActions{\n    SetPopularMovieList = \"SET_POPULAR_MOVIE_LIST\",\n    SetTopRatedMovieList = \"SET_TOP_RATED_MOVIE_LIST\",\n    SetUpcomingMovieList = \"SET_UPCOMING_MOVIE_LIST\",\n    SetMovieListFailed = \"SET_MOVIE_LIST_FAILED\"\n}","import { HomeActions } from \"../../common/enums/actions/home\";\n\nconst INITIAL_STATE = {\n  popularMovieList: [],\n  topRatedMovieList: [],\n  upcomingMovieList: [],\n};\n\nconst homeReducer = (state = INITIAL_STATE, action: any) => {\n  const { type, ...rest } = action;\n  switch (type) {\n    case HomeActions.SetPopularMovieList:\n      return { ...state, ...rest };\n    case HomeActions.SetTopRatedMovieList:\n      return { ...state, ...rest };\n    case HomeActions.SetUpcomingMovieList:\n      return { ...state, ...rest };\n    case HomeActions.SetMovieListFailed:\n      return { ...state, ...rest };\n    default:\n      return state;\n  }\n};\n\nexport default homeReducer;\n","export enum MovieActions{\n    SetMovieDetails = \"SET_MOVIE_DETAILS\",\n    SetMovieDetailsFailed = \"SET_MOVIE_DETAILS_FAILED\"\n}","import { MovieActions } from \"../../common/enums/actions/movie\";\n\nconst INITIAL_STATE = {\n  movieDetails: undefined,\n};\n\nconst movieReducer = (state = INITIAL_STATE, action: any) => {\n  const { type, ...rest } = action;\n  switch (type) {\n    case MovieActions.SetMovieDetails:\n      return { ...state, ...rest };\n    case MovieActions.SetMovieDetailsFailed:\n      return { ...state, ...rest };\n    default:\n      return state;\n  }\n};\n\nexport default movieReducer;\n","//action for movies page\n\nexport enum MoviesActions{\n    SetMovieList = \"SET_MOVIE_LIST\",\n    SetMovieListFailed = \"SET_MOVIE_LIST_FAILED\"\n}","import { MoviesActions } from \"../../common/enums/actions/movies\";\nconst INITIAL_STATE = {\n  movieList: [],\n  page: 1,\n  totalPage: 1,\n};\nconst moviesReducer = (state = INITIAL_STATE, action: any) => {\n  const { type, ...rest } = action;\n  switch (type) {\n    case MoviesActions.SetMovieList:\n      return { ...state, ...rest };\n    case MoviesActions.SetMovieListFailed:\n      return { ...state, ...rest };\n    default:\n      return state;\n  }\n};\n\nexport default moviesReducer;\n","export enum SearchActions{\n    SearchByLanguage = \"SEARCH_BY_LANGUAGE\",\n    SearchByGenre = \"SEARCH_BY_GENRE\",\n    SearchByQuery = \"SEARCH_BY_QUERY\",\n    SearchMoviesFailed = \"SEARCH_MOVIES_FAILED\"\n}","import { SearchActions } from \"../../common/enums/actions/search\";\n\nconst INITIAL_STATE = {\n  language: undefined,\n  genreID: undefined,\n  query: undefined,\n  page: 1,\n  movieList: [],\n  totalPages: 1,\n  error: undefined,\n};\nconst searchReducer = (state = INITIAL_STATE, action: any) => {\n  const { type, ...rest } = action;\n  switch (type) {\n    case SearchActions.SearchByLanguage:\n      return {\n        ...state,\n        ...rest,\n        genreID: undefined,\n        query: undefined,\n      };\n    case SearchActions.SearchByGenre:\n      return {\n        ...state,\n        ...rest,\n        language: undefined,\n        query: undefined,\n      };\n    case SearchActions.SearchByQuery:\n      return { ...state, ...rest, language: undefined, genreID: undefined };\n\n    case SearchActions.SearchMoviesFailed:\n      return { ...state, ...rest };\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","export enum Path{\n    Home = \"/home\",\n    Root =\"/\",\n    Movies =\"/movies/\",\n    Movie = \"/movie/\",\n    SearchByGenre = \"/search/genre/\",\n    SearchByLanguage = \"/search/language/\",\n    SearchByQuery = \"/search/query/\"\n}","import { combineReducers } from \"redux\";\nimport homeReducer from \"./home\";\nimport movieReducer from \"./movie\";\nimport moviesReducer from \"./movies\";\nimport searchReducer from \"./search\";\nexport default combineReducers({\n  home: homeReducer,\n  movies: moviesReducer,\n  movie: movieReducer,\n  search: searchReducer,\n});\n","export enum HomeSaga{\n    SetPopularMovieListSaga = \"SET_LATEST_MOVIE_LIST_SAGA\",\n    SetTopRatedMovieListSaga = \"SET_TOP_RATED_MOVIE_LIST_SAGA\",\n    SetUpcomingMovieListSaga = \"SET_UPCOMING_MOVIE_LIST_SAGA\"\n}","import { LocalMovies, Search, Home } from \"@mui/icons-material\";\nimport {\n  AppBar,\n  Box,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  OutlinedInput,\n  Toolbar,\n} from \"@mui/material\";\nimport { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Path } from \"../../common/enums/path\";\n\nconst NavBar: FC<{}> = () => {\n  const history = useHistory();\n\n  const handleSearchOnClick = () => {};\n\n  const handleSearchKeyDown = (event: any) => {\n    const {key} = event.nativeEvent;\n    if(key !== \"Enter\") return;\n    const {value} = event.target;\n    if(!value) return\n    history.push(`${Path.SearchByQuery}${value}/page/1`)\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton color=\"inherit\" onClick={() => history.push(Path.Home)}>\n            <Home />\n          </IconButton>\n          <IconButton color=\"inherit\" onClick={() => history.push(`${Path.Movies}page/1`)}>\n            <LocalMovies />\n          </IconButton>\n          <div>\n            <FormControl variant=\"outlined\">\n              <OutlinedInput\n                onKeyDown={handleSearchKeyDown}\n                placeholder=\"Search\"\n                id=\"outlined-adornment-weight\"\n                size=\"small\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={handleSearchOnClick}>\n                      <Search />\n                    </IconButton>\n                  </InputAdornment>\n                }\n              />\n            </FormControl>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n\nexport default NavBar;\n","import { HomeSaga } from \"../../common/enums/sagas/home\";\n\nexport const setPopularMovieList = () => {\n  return {\n    type: HomeSaga.SetPopularMovieListSaga,\n  };\n};\n\nexport const setTopRatedMovieList = () => {\n  return {\n    type: HomeSaga.SetTopRatedMovieListSaga,\n  };\n};\n\nexport const setUpcomingMovieList = () => {\n  return {\n    type: HomeSaga.SetUpcomingMovieListSaga,\n  };\n};\n","export enum MovieDefaults{\n    PosterURL =\"https://image.tmdb.org/t/p/w500/\",\n}","import { Link } from \"@mui/material\";\nimport { FC, Fragment } from \"react\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport { useSelector } from \"react-redux\";\nimport { MovieDefaults } from \"../../../common/defaults/movie\";\nimport { Path } from \"../../../common/enums/path\";\nimport { Props } from \"./types\";\n\nconst MovieCarousel: FC<Props> = ({ type }) => {\n  const movieList = useSelector((state: any) => {\n    if (type === \"Popular\") {\n      return state.home.popularMovieList;\n    } else if (type === \"Top Rated\") {\n      return state.home.topRatedMovieList;\n    } else if (type === \"Upcoming\") {\n      return state.home.upcomingMovieList;\n    } else {\n      return [];\n    }\n  });\n  \n  const error = useSelector((state:any)=>state.home.error)\n  const responsive = {\n    desktop: {\n      breakpoint: { max: 3000, min: 1024 },\n      items: 3,\n      slidesToSlide: 3, // optional, default to 1.\n    },\n    tablet: {\n      breakpoint: { max: 1024, min: 464 },\n      items: 2,\n      slidesToSlide: 2, // optional, default to 1.\n    },\n    mobile: {\n      breakpoint: { max: 464, min: 0 },\n      items: 1,\n      slidesToSlide: 1, // optional, default to 1.\n    },\n  };\n\n  if (error) {\n    return <h1>{error.message}</h1>;\n  }\n  return (\n    <Fragment>\n      <h1>{type}</h1>\n      <Carousel\n        responsive={responsive}\n        showDots={true}\n        infinite={true}\n        keyBoardControl={true}\n      >\n        {movieList?.map((movie: any) => {\n          return (\n            <div key={movie.id}>\n              <Link href={`${Path.Movie}${movie.id}`}>\n                <img\n                  src={`${MovieDefaults.PosterURL}${movie.poster_path}`}\n                  alt={movie.original_title}\n                />\n              </Link>\n            </div>\n          );\n        })}\n      </Carousel>\n    </Fragment>\n  );\n};\n\nexport default MovieCarousel;\n","export enum MoviesSaga{\n    SetMovieListSaga = \"SET_MOVIE_LIST_SAGA\",\n}","import { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport NavBar from \"../../components/NavBar\";\nimport {\n  setPopularMovieList,\n  setTopRatedMovieList,\n  setUpcomingMovieList,\n} from \"../../state/actions/home\";\nimport MovieCarousel from \"./MovieCarousel\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  dispatch(setPopularMovieList());\n  dispatch(setTopRatedMovieList());\n  dispatch(setUpcomingMovieList());\n\n  return (\n    <Fragment>\n      <NavBar />\n      <MovieCarousel type=\"Popular\" />\n      <MovieCarousel type=\"Top Rated\" />\n      <MovieCarousel type=\"Upcoming\" />\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import { MoviesSaga } from \"../../common/enums/sagas/movies\";\n\nexport const setMovieList = (page:string) => {\n  return {\n    type: MoviesSaga.SetMovieListSaga,\n    page\n  };\n};\n","export enum MovieSaga{\n    SetMovieDetailsSaga = \"SET_MOVIE_DETAILS_SAGA\"\n}","import { Container, Pagination } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { MovieDefaults } from \"../../common/defaults/movie\";\nimport { Path } from \"../../common/enums/path\";\n\nconst MovieList = () => {\n  const { movieList, page, totalPage } = useSelector(\n    (state: any) => state.movies\n  );\n  const error = useSelector((state: any) => state.movie.error);\n  const history = useHistory();\n  const handleChangePage = (\n    event: React.ChangeEvent<unknown>,\n    page: number\n  ) => {\n    history.push(`${Path.Movies}page/${page}`);\n  };\n  if (error) {\n    return <h1>{error.message}</h1>;\n  }\n  return (\n    <Fragment>\n      {!!movieList.length ? (\n        <Fragment>\n          {movieList.map((movie: any) => {\n            return (\n              <Link to={`${Path.Movie}${movie.id}`} key={movie.id}>\n                <img\n                  src={`${MovieDefaults.PosterURL}${movie.poster_path}`}\n                  alt={movie.original_title}\n                  width={window.innerWidth / 6}\n                  height={(window.innerWidth / 6) * 1.5}\n                />\n              </Link>\n            );\n          })}\n          <Container maxWidth=\"sm\">\n            <Pagination\n              count={totalPage}\n              page={page}\n              color=\"primary\"\n              size=\"large\"\n              variant=\"outlined\"\n              shape=\"rounded\"\n              onChange={handleChangePage}\n            />\n          </Container>\n        </Fragment>\n      ) : (\n        \"No Results\"\n      )}\n    </Fragment>\n  );\n};\n\nexport default MovieList;\n","import { useDispatch } from \"react-redux\";\nimport { setMovieList } from \"../../state/actions/movies\";\nimport MovieList from \"../../components/MovieList\";\nimport { FC, Fragment } from \"react\";\nimport NavBar from \"../../components/NavBar\";\nimport { Props } from \"./types\";\n\nconst Movies:FC<Props> = (props:Props) => {\n  const dispatch = useDispatch();\n  const {page=\"1\"} = props.match.params;\n  dispatch(setMovieList(page));\n  return (\n    <Fragment>\n      <NavBar />\n      <MovieList />\n    </Fragment>\n  );\n};\n\nexport default Movies;\n","import { MovieSaga } from \"../../common/enums/sagas/movie\";\n\nexport const setMovieDetails = (movieID: string) => {\n  return {\n    type: MovieSaga.SetMovieDetailsSaga,\n    movieID,\n  };\n};\n","import { Card, CardMedia, Grid, List, ListItem } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Path } from \"../../../common/enums/path\";\n\nconst MovieDetails = () => {\n  const movieDetails = useSelector((state: any) => state.movie.movieDetails);\n  const error = useSelector((state:any)=> state.movie.error);\n  if(error){\n    return <h1>{error.message}</h1>\n  }\n  if (!movieDetails) {\n    return null;\n  }\n  return (\n    <Fragment>\n      <br></br>\n      <br></br>\n      <Card raised>\n        <Grid container>\n          <Grid item xs={4}>\n            <CardMedia\n              component=\"img\"\n              alt={movieDetails.title}\n              image={`https://image.tmdb.org/t/p/original/${movieDetails.poster_path}`}\n              title={movieDetails.title}\n            />\n          </Grid>\n          <Grid item xs={8}>\n            <List>\n              <ListItem>Title: {movieDetails.title}</ListItem>\n              {movieDetails.title !== movieDetails.original_title && (\n                <ListItem>\n                  Original Title: {movieDetails.original_title}\n                </ListItem>\n              )}\n              {!!movieDetails.genres.length && (\n                <ListItem>\n                  Genres:\n                  {movieDetails.genres.map((genre: any, index: number) => {\n                    return (\n                      <Fragment key={index}>\n                        &nbsp;&nbsp;\n                        <Link\n                          to={`${Path.SearchByGenre}${genre.id}/page/1`}\n                          key={index}\n                        >\n                          {genre.name}\n                        </Link>\n                      </Fragment>\n                    );\n                  })}\n                </ListItem>\n              )}\n              {!!movieDetails.spoken_languages.length && (\n                <ListItem>\n                  Language:\n                  {movieDetails.spoken_languages.map(\n                    (language: any, index: number) => {\n                      return (\n                        <Fragment key={index}>\n                          &nbsp;&nbsp;\n                          <Link\n                            to={`${Path.SearchByLanguage}${language.iso_639_1}/page/1`}\n                            key={index}\n                          >\n                            {language.english_name}\n                          </Link>\n                        </Fragment>\n                      );\n                    }\n                  )}\n                </ListItem>\n              )}\n              {movieDetails.overview && (\n                <ListItem>Overview: {movieDetails.overview}</ListItem>\n              )}\n              {!!movieDetails.videos.results.length && (\n                <iframe\n                  title=\"trailer\"\n                  width=\"1280\"\n                  height=\"720\"\n                  src={`https://www.youtube.com/embed/${movieDetails.videos.results[0].key}`}\n                />\n              )}\n            </List>\n          </Grid>\n        </Grid>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default MovieDetails;\n","import { FC, Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport NavBar from \"../../components/NavBar\";\nimport { setMovieDetails } from \"../../state/actions/movie\";\nimport MovieDetails from \"./MovieDetails\";\nimport { Props } from \"./types\";\n\nconst Movie: FC<Props> = (props: Props) => {\n  const dispatch = useDispatch();\n  dispatch(setMovieDetails(props.match.params.id));\n  return (\n    <Fragment>\n      <NavBar />\n      <MovieDetails/>\n    </Fragment>\n  );\n};\n\nexport default Movie;\n","const API_KEY = \"6fdc960c4cb19000df3556ff8e8b5831\";\n\nexport const HomeEndpoint = {\n  PopularMoviesEndpoint: `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&page=1`,\n  TopRatedMoviesEndpoint: `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&page=1`,\n  UpcomingMoviesEndpoint: `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}&page=1`,\n};\n","import axios from \"axios\";\nconst source = axios.CancelToken.source();\nexport const fetchMovieList = async (endpoint: string) => {\n  return await axios.get(endpoint, {\n    cancelToken: source.token,\n  });\n};","import { HomeSaga } from \"../../common/enums/sagas/home\";\nimport { takeLatest, call, put, fork } from \"@redux-saga/core/effects\";\nimport { HomeActions } from \"../../common/enums/actions/home\";\nimport { HomeEndpoint } from \"../../common/defaults/endpoints/home\";\nimport { fetchMovieList } from \"../../utils/home\";\n//worker functions\nfunction* getPopularMovieList(): any {\n  try {\n    const response = yield call(\n      fetchMovieList,\n      HomeEndpoint.PopularMoviesEndpoint\n    );\n    const { results: popularMovieList } = response.data;\n    yield put({ type: HomeActions.SetPopularMovieList, popularMovieList });\n  } catch (error) {\n    yield put({ type: HomeActions.SetMovieListFailed, error });\n  }\n}\n\nfunction* getTopRatedMovieListSaga(): any {\n  try {\n    const response = yield call(\n      fetchMovieList,\n      HomeEndpoint.TopRatedMoviesEndpoint\n    );\n    const { results: topRatedMovieList } = response.data;\n    yield put({ type: HomeActions.SetTopRatedMovieList, topRatedMovieList });\n  } catch (error) {\n    yield put({ type: HomeActions.SetMovieListFailed, error });\n  }\n}\n\nfunction* getUpcomingMovieListSaga(): any {\n  try {\n    const response = yield call(\n      fetchMovieList,\n      HomeEndpoint.UpcomingMoviesEndpoint\n    );\n    const { results: upcomingMovieList } = response.data;\n    yield put({ type: HomeActions.SetUpcomingMovieList, upcomingMovieList });\n  } catch (error) {\n    yield put({ type: HomeActions.SetMovieListFailed, error });\n  }\n}\n\n//watcher function\nfunction* watchUpcomingMovieListSaga() {\n  yield takeLatest(HomeSaga.SetUpcomingMovieListSaga, getUpcomingMovieListSaga);\n}\n\nfunction* watchSetTopRatedMovieListSaga() {\n  yield takeLatest(HomeSaga.SetTopRatedMovieListSaga, getTopRatedMovieListSaga);\n}\nfunction* watchSetPopularMovieListSaga() {\n  yield takeLatest(HomeSaga.SetPopularMovieListSaga, getPopularMovieList);\n}\n\nexport default function* rootSaga() {\n  yield fork(watchSetTopRatedMovieListSaga);\n  yield fork(watchSetPopularMovieListSaga);\n  yield fork(watchUpcomingMovieListSaga);\n}\n","import axios from \"axios\";\nconst API_KEY = \"6fdc960c4cb19000df3556ff8e8b5831\";\nexport const fetchMovieList = async (page: any) => {\n  return await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&page=${page}`);\n};\n","import { takeLatest, call, put } from \"@redux-saga/core/effects\";\nimport { MoviesActions } from \"../../common/enums/actions/movies\";\nimport { MoviesSaga } from \"../../common/enums/sagas/movies\";\nimport { fetchMovieList } from \"../../utils/movies\";\n//worker functions\nfunction* getMovieList({ page }: any): any {\n  try {\n    const response = yield call(fetchMovieList, page);\n    const { results: movieList, total_results } = response.data;\n    yield put({\n      type: MoviesActions.SetMovieList,\n      movieList,\n      totalPage: Math.ceil(total_results / 20),\n      page: parseInt(page),\n    });\n  } catch (error) {\n    yield put({ type: MoviesActions.SetMovieListFailed, error });\n  }\n}\n\n//watcher function\nexport function* watchSetMovieListSaga() {\n  yield takeLatest(MoviesSaga.SetMovieListSaga, getMovieList);\n}\n","import axios from \"axios\";\nconst API_KEY = \"6fdc960c4cb19000df3556ff8e8b5831\";\n\nconst source = axios.CancelToken.source();\nexport const fetchMovieDetails = async (movieID: string) => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US&append_to_response=videos,imagess&include_image_language=en,null`,\n    {\n      cancelToken: source.token,\n    }\n  );\n};","export enum SearchSaga{\n    SearchByLanguageSaga = \"SEARCH_BY_LANGUAGE_SAGA\",\n    SearchByGenreSaga = \"SEARCH_BY_GENRE_SAGA\",\n    SearchByQuerySaga = \"SEARCH_BY_QUERY_SAGA\"\n}\n","import { takeLatest, call, put } from \"@redux-saga/core/effects\";\nimport { MovieActions } from \"../../common/enums/actions/movie\";\nimport { MovieSaga } from \"../../common/enums/sagas/movie\";\nimport { fetchMovieDetails } from \"../../utils/movie\";\n//worker functions\nfunction* getMovieDetails({ movieID }: any): any {\n  try {\n    const response = yield call(fetchMovieDetails, movieID);\n    const { data: movieDetails } = response;\n    yield put({ type: MovieActions.SetMovieDetails, movieDetails });\n  } catch (error) {\n    yield put({ type: MovieActions.SetMovieDetailsFailed, error });\n  }\n}\n\n//watcher function\nexport function* watchSetMovieDetailsSaga() {\n  yield takeLatest(MovieSaga.SetMovieDetailsSaga, getMovieDetails);\n}\n","import { SearchSaga } from \"../../common/enums/sagas/search\";\n\nexport const searchByLanguage = (language: string, page: string) => {\n  return {\n    type: SearchSaga.SearchByLanguageSaga,\n    language,\n    page,\n  };\n};\n\nexport const searchByGenre = (genreID: string, page: string) => {\n  return {\n    type: SearchSaga.SearchByGenreSaga,\n    genreID,\n    page,\n  };\n};\n\nexport const searchByQuery = (query: string, page: string) => {\n  return {\n    type: SearchSaga.SearchByQuerySaga,\n    query,\n    page,\n  };\n};\n","import { Container, Pagination } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { MovieDefaults } from \"../../../common/defaults/movie\";\nimport { Path } from \"../../../common/enums/path\";\n\nconst SearchResults = () => {\n  const { movieList, page, totalPages, language, genreID, query } = useSelector(\n    (state: any) => state.search\n  );\n  const history = useHistory();\n  const handleChangePage = (\n    event: React.ChangeEvent<unknown>,\n    value: number\n  ) => {\n    if (genreID) {\n      history.push(`${Path.SearchByGenre}${genreID}/page/${value}`);\n    } else if (language) {\n      history.push(`${Path.SearchByLanguage}${language}/page/${value}`);\n    } else if (query) {\n      history.push(`${Path.SearchByQuery}${query}/page/${value}`);\n    }\n  };\n\n  return (\n    <Fragment>\n      {!!movieList.length ? (\n        <Fragment>\n          {movieList.map((movie: any) => {\n            return (\n              <Link to={`${Path.Movie}${movie.id}`} key={movie.id}>\n                <img\n                  src={`${MovieDefaults.PosterURL}${movie.poster_path}`}\n                  alt={movie.original_title}\n                  width={window.innerWidth / 6}\n                  height={(window.innerWidth / 6) * 1.5}\n                />\n              </Link>\n            );\n          })}\n          <Container maxWidth=\"sm\">\n            <Pagination\n              count={parseInt(totalPages)}\n              page={parseInt(page)}\n              color=\"primary\"\n              size=\"large\"\n              variant=\"outlined\"\n              shape=\"rounded\"\n              onChange={handleChangePage}\n            />\n          </Container>\n        </Fragment>\n      ) : (\n        \"No Results\"\n      )}\n    </Fragment>\n  );\n};\n\nexport default SearchResults;\n","import { FC, Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport NavBar from \"../../components/NavBar\";\nimport {\n  searchByGenre,\n  searchByLanguage,\n  searchByQuery,\n} from \"../../state/actions/search\";\nimport SearchResults from \"./SearchResults\";\nimport { Props } from \"./types\";\n\nconst Search: FC<Props> = (props: Props) => {\n  const dispatch = useDispatch();\n  const {\n    page,\n    language = undefined,\n    genreID = undefined,\n    query = undefined,\n  } = props.match.params;\n  if (genreID && !language && !query) {\n    dispatch(searchByGenre(genreID, page));\n  } else if (language && !genreID && !query) {\n    dispatch(searchByLanguage(language, page));\n  } else if (query && !language && !genreID) {\n    dispatch(searchByQuery(query, page));\n  }\n  return (\n    <Fragment>\n      <NavBar />\n      <SearchResults />\n    </Fragment>\n  );\n};\n\nexport default Search;\n","import axios from \"axios\";\nconst source = axios.CancelToken.source();\nexport const fetchSearchByLanguageMovieList = async (\n  language: string,\n  page: string\n) => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/discover/movie?api_key=6fdc960c4cb19000df3556ff8e8b5831&with_original_language=${language}&page=${page}`,\n    {\n      cancelToken: source.token,\n    }\n  );\n};\n\nexport const fetchSearchByGenreMovieList = async (\n  genreID: string,\n  page: string\n) => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/discover/movie?api_key=6fdc960c4cb19000df3556ff8e8b5831&with_genres=${genreID}&page=${page}`,\n    {\n      cancelToken: source.token,\n    }\n  );\n};\n\nexport const fetchSearchByQueryMovieList = async (\n  query: string,\n  page: string\n) => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=6fdc960c4cb19000df3556ff8e8b5831&query=${query}&page=${page}`,\n    {\n      cancelToken: source.token,\n    }\n  );\n};\n","import { call, put, takeLatest } from \"@redux-saga/core/effects\";\nimport { SearchActions } from \"../../common/enums/actions/search\";\nimport { SearchSaga } from \"../../common/enums/sagas/search\";\nimport {\n  fetchSearchByGenreMovieList,\n  fetchSearchByLanguageMovieList,\n  fetchSearchByQueryMovieList,\n} from \"../../utils/search\";\n\nfunction* getSearchByLanguageResults({ language, page }: any): any {\n  try {\n    const response = yield call(fetchSearchByLanguageMovieList, language, page);\n    const { results: movieList, total_results } = response.data;\n    yield put({\n      type: SearchActions.SearchByLanguage,\n      movieList,\n      page: parseInt(page),\n      language,\n      totalPages: Math.ceil(total_results / 20),\n      error: undefined,\n    });\n  } catch (error) {\n    yield put({ type: SearchActions.SearchMoviesFailed, error });\n  }\n}\n\nfunction* getSearchByGenreResults({ genreID, page }: any): any {\n  try {\n    const response = yield call(fetchSearchByGenreMovieList, genreID, page);\n    const { results: movieList, total_results } = response.data;\n    yield put({\n      type: SearchActions.SearchByGenre,\n      movieList,\n      page: parseInt(page),\n      genreID,\n      totalPages: Math.ceil(total_results / 20),\n      error: undefined,\n    });\n  } catch (error) {\n    yield put({ type: SearchActions.SearchMoviesFailed, error });\n  }\n}\n\nfunction* getSearchByQuery({ query, page }: any): any {\n  try {\n    const response = yield call(fetchSearchByQueryMovieList, query, page);\n    const { results: movieList, total_results } = response.data;\n    yield put({\n      type: SearchActions.SearchByQuery,\n      movieList,\n      page,\n      query,\n      totalPages: Math.ceil(total_results / 20),\n      error: undefined,\n    });\n  } catch (error) {\n    yield put({ type: SearchActions.SearchMoviesFailed, error });\n  }\n}\n\nexport function* watchSearchByQuerySaga() {\n  yield takeLatest(SearchSaga.SearchByQuerySaga, getSearchByQuery);\n}\n\nexport function* watchSearchByLanguageSaga() {\n  yield takeLatest(SearchSaga.SearchByLanguageSaga, getSearchByLanguageResults);\n}\n\nexport function* watchSearchByGenreSaga() {\n  yield takeLatest(SearchSaga.SearchByGenreSaga, getSearchByGenreResults);\n}\n","import { Provider } from \"react-redux\";\nimport reducer from \"./state/reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Pages/Home\";\nimport Movies from \"./Pages/Movies\";\nimport Movie from \"./Pages/Movie\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport rootSaga from \"./state/sagas/home\";\nimport { Path } from \"./common/enums/path\";\nimport { watchSetMovieListSaga } from \"./state/sagas/movies\";\nimport { watchSetMovieDetailsSaga } from \"./state/sagas/movie\";\nimport Search from \"./Pages/Search\";\nimport {\n  watchSearchByLanguageSaga,\n  watchSearchByGenreSaga,\n  watchSearchByQuerySaga,\n} from \"./state/sagas/search\";\nconst App = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n  sagaMiddleware.run(rootSaga);\n  sagaMiddleware.run(watchSetMovieListSaga);\n  sagaMiddleware.run(watchSetMovieDetailsSaga);\n  sagaMiddleware.run(watchSearchByLanguageSaga);\n  sagaMiddleware.run(watchSearchByGenreSaga);\n  sagaMiddleware.run(watchSearchByQuerySaga)\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <Switch>\n            <Route\n              exact\n              path={`${Path.SearchByGenre}:genreID/page/:page`}\n              component={Search}\n            />\n            <Route\n              exact\n              path={`${Path.SearchByLanguage}:language/page/:page`}\n              component={Search}\n            />\n            <Route\n              exact\n              path={`${Path.SearchByQuery}:query/page/:page`}\n              component={Search}\n            />\n            <Route exact path={`${Path.Movies}page/:page`} component={Movies} />\n            <Route exact path={`${Path.Movie}:id`} component={Movie} />\n            <Route path={[Path.Root,Path.Home]} component={Home} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}